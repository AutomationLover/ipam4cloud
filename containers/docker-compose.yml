services:
  postgres:
    image: postgres:15
    container_name: prefix_db
    environment:
      POSTGRES_DB: prefix_management
      POSTGRES_USER: prefix_user
      POSTGRES_PASSWORD: prefix_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prefix_user -d prefix_management"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  app:
    image: python:3.11-slim
    container_name: prefix_app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://prefix_user:prefix_pass@postgres:5432/prefix_management
    volumes:
      - ./app:/app
      - ../requirements.txt:/requirements.txt
    working_dir: /app
    command: sh -c "pip install -r /requirements.txt && python main.py"

  backend:
    build: ./backend
    container_name: prefix_backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://prefix_user:prefix_pass@postgres:5432/prefix_management
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
      - ./backend:/backend
    working_dir: /backend

  admin-frontend:
    build: ./frontend
    container_name: prefix_admin_frontend
    depends_on:
      - backend
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VUE_APP_API_URL=http://localhost:8000

  readonly-frontend:
    build: ./frontend-readonly
    container_name: prefix_readonly_frontend
    depends_on:
      - backend
    ports:
      - "8081:8081"
    volumes:
      - ./frontend-readonly:/app
      - /app/node_modules
    environment:
      - VUE_APP_API_URL=http://localhost:8000

  aws-sync:
    image: python:3.11-slim
    container_name: prefix_aws_sync
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://prefix_user:prefix_pass@postgres:5432/prefix_management}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-2}
      AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID}
      SYNC_MODE: ${SYNC_MODE:-continuous}
      SYNC_INTERVAL: ${SYNC_INTERVAL:-300}
      AWS_PAGE_SIZE: ${AWS_PAGE_SIZE:-100}
      MAX_SUBNETS_PER_VPC: ${MAX_SUBNETS_PER_VPC:-1000}
      DB_BATCH_SIZE: ${DB_BATCH_SIZE:-50}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_DIR: ${LOG_DIR:-logs}
      DEFAULT_VRF_ID: ${DEFAULT_VRF_ID:-prod-vrf}
      # AWS credentials will be read from mounted ~/.aws directory
    volumes:
      - ./app:/app
      - ../requirements.txt:/requirements.txt
      - ~/.aws:/root/.aws:ro  # Mount AWS credentials (read-only)
    working_dir: /app
    command: sh -c "apt-get update && apt-get install -y gcc && pip install -r /requirements.txt && python aws_vpc_sync.py"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import os; exit(0 if os.path.exists('logs/aws_sync.log') else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
